name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub (Optional - if you plan to push to DockerHub)
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main' # Only run on merge to main
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false # Set to true to push to a registry
        tags: yourdockerhubusername/todo-backend:latest # Replace with your DockerHub username and image name
        # cache-from: type=gha
        # cache-to: type=gha,mode=max

  # Placeholder for frontend build and test
  # build-frontend:
  #   runs-on: ubuntu-latest
  #   needs: build-backend # Example dependency
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Use Node.js
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: '18.x' # Or your frontend's Node.js version
  #   - name: Install frontend dependencies
  #     run: |
  #       cd frontend # Assuming frontend code is in a 'frontend' directory
  #       npm install
  #   - name: Build frontend
  #     run: |
  #       cd frontend
  #       npm run build # Or your frontend build command
  #   - name: Run frontend tests
  #     run: |
  #       cd frontend
  #       npm test # Or your frontend test command

  # Placeholder for deployment job
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build-backend] # Add build-frontend if you have it
  #   if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main' # Only deploy on merge to main
  #   steps:
  #   - name: Deploy to production
  #     run: echo "Deploying..." # Replace with your actual deployment script/commands
      # Example: ssh user@server "cd /path/to/app && docker-compose pull && docker-compose up -d"
