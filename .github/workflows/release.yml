name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.pre_release }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            if [[ $VERSION =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE=true
            else
              IS_PRERELEASE=false
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION (prerelease: $IS_PRERELEASE)"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi

      - name: Check if version exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git tag | grep -q "^v$VERSION$"; then
            echo "Version v$VERSION already exists"
            exit 1
          fi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Validate package can be built
        run: |
          python -m build
          twine check dist/*

  run-tests:
    name: Run Full Test Suite
    runs-on: ${{ matrix.os }}
    needs: validate-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests
        run: |
          pytest --cov=src/agentic --cov-report=xml --junitxml=test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            test-results.xml
            coverage.xml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Build documentation
        run: |
          cd docs
          make html

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/build/html/

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          sed -i "s/version = .*/version = \"$VERSION\"/" pyproject.toml

      - name: Build package
        run: |
          python -m build

      - name: Verify package
        run: |
          twine check dist/*
          
      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install changelog generator
        run: |
          npm install -g conventional-changelog-cli

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Generate changelog for this version
          CHANGELOG=$(conventional-changelog -p angular -r 2)
          
          # Save to file and output
          echo "$CHANGELOG" > RELEASE_CHANGELOG.md
          
          # Set output (escape newlines)
          {
            echo 'changelog<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Upload changelog
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: RELEASE_CHANGELOG.md

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-package, generate-changelog]
    outputs:
      release-url: ${{ steps.release.outputs.html_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download package artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/

      - name: Download changelog
        uses: actions/download-artifact@v3
        with:
          name: changelog

      - name: Create Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          release_name: Release v${{ needs.validate-release.outputs.version }}
          body_path: RELEASE_CHANGELOG.md
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}

      - name: Upload wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: dist/agentic-${{ needs.validate-release.outputs.version }}-py3-none-any.whl
          asset_name: agentic-${{ needs.validate-release.outputs.version }}-py3-none-any.whl
          asset_content_type: application/zip

      - name: Upload source distribution to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: dist/agentic-${{ needs.validate-release.outputs.version }}.tar.gz
          asset_name: agentic-${{ needs.validate-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/

      - name: Publish to Test PyPI
        if: needs.validate-release.outputs.is_prerelease == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish to PyPI
        if: needs.validate-release.outputs.is_prerelease == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [create-release, build-docs]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download documentation
        uses: actions/download-artifact@v3
        with:
          name: documentation
          path: docs-build/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs-build/
          cname: docs.agentic.ai

  notify-slack:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-pypi, deploy-docs]
    if: always()
    steps:
      - name: Notify Slack on Success
        if: needs.create-release.result == 'success' && needs.publish-pypi.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚀 Agentic v${{ needs.validate-release.outputs.version }} has been released!
            
            📦 PyPI: https://pypi.org/project/agentic/${{ needs.validate-release.outputs.version }}/
            📋 Release: ${{ needs.create-release.outputs.release-url }}
            📚 Docs: https://docs.agentic.ai
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Release pipeline failed for Agentic v${{ needs.validate-release.outputs.version }}
            
            Please check the GitHub Actions logs for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    steps:
      - name: Update Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v2
        with:
          formula-name: agentic
          homebrew-tap: agentic-ai/homebrew-tap
          base-branch: main
          download-url: https://files.pythonhosted.org/packages/source/a/agentic/agentic-${{ needs.validate-release.outputs.version }}.tar.gz
        env:
          COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}

  create-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            agentic/agentic:${{ needs.validate-release.outputs.version }}
            agentic/agentic:latest
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ needs.validate-release.outputs.version }}

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-pypi]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Bump version for development
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Parse version and increment patch for dev
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Remove any pre-release suffix
          PATCH=$(echo $PATCH | sed 's/-.*//')
          
          # Increment patch
          NEXT_PATCH=$((PATCH + 1))
          DEV_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}-dev"
          
          # Update pyproject.toml
          sed -i "s/version = .*/version = \"$DEV_VERSION\"/" pyproject.toml
          
          echo "Updated version to $DEV_VERSION for development"

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "chore: bump version to ${{ needs.validate-release.outputs.version }}-dev" || exit 0
          git push

      - name: Create milestone for next version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Calculate next minor version for milestone
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          NEXT_MINOR=$((MINOR + 1))
          NEXT_VERSION="${MAJOR}.${NEXT_MINOR}.0"
          
          # Create milestone using GitHub CLI
          gh api repos/${{ github.repository }}/milestones \
            --method POST \
            --field title="v$NEXT_VERSION" \
            --field description="Next minor release milestone"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 